import itertools
import numpy as np

Q_MAT = np.array([
    [16, 11, 10, 16, 24, 40, 51, 61],
    [12, 12, 14, 19, 26, 58, 60, 55],
    [14, 13, 16, 24, 40, 57, 69, 56],
    [14, 17, 22, 29, 51, 87, 80, 62],
    [18, 22, 37, 56, 68, 109, 103, 77],
    [24, 35, 55, 64, 81, 104, 113, 92],
    [49, 64, 78, 87, 103, 121, 120, 101],
    [72,  92, 95, 98, 112, 100, 103, 99]]
)

# Table A
def jpeg_coefficient_coding_categories(x):
    if x == 0:
        return [('0')]
    else:
        category = len(bin(x).partition('b')[-1])
        return list(itertools.product(['0', '1'], repeat=category))

def retrieve_binary_rep(L, x):
    mid = len(L)//2
    val = L[:mid][(x % mid) - 1] if (x < 0) else L[mid:][x - mid]
    return "".join(val)

# x = -9
# L = jpeg_coefficient_coding_categories(x)
# print(x)
# print(retrieve_binary_rep(L, x))

# Table B
HUFFMAN_DC_TABLE = np.array([
    "010",
    "011",
    "100",
    "00",
    "101",
    "110",
    "1110",
    "11110",
    "111110",
    "1111110",
    "11111110",
    "111111110"
])

# Table C
HUFFMAN_AC_TABLE = {
    '0/0': "1010",
    '0/1': "00",
    '0/2': "01",
    '0/3': "100",
    '0/4': "1011",
    '0/5': "11010",
    '0/6': "111000",
    '0/7': "1111000",
    '0/8': "1111110110",
    '0/9': "1111111110000010",
    '0/10':"1111111110000011",
    '1/1': "110",
    '1/2': "111001",
    '1/3': "1111001",
    '1/4': "111110110",
    '1/5': "11111110110",
    '1/6': "1111111110000100",
    '1/7': "1111111110000101",
    '1/8': "1111111110000110",
    '1/9': "1111111110000111",
    '1/10':"1111111110001000",
    '2/1': "11011",
    '2/2': "11111000",
    '2/3': "1111110111",
    '2/4': "1111111110001001",
    '2/5': "1111111110001010",
    '2/6': "1111111110001011",
    '2/7': "1111111110001100",
    '2/8': "1111111110001101",
    '2/9': "1111111110001110",
    '2/10':"1111111110001111",
    '3/1':,
    '3/2':,
    '3/3':,
    '3/4':,
    '3/5':,
    '3/6':,
    '3/7':,
    '3/8':,
    '3/9':,
    '3/10':,
    '4/1':,
    '4/2':,
    '4/3':,
    '4/4':,
    '4/5':,
    '4/6':,
    '4/7':,
    '4/8':,
    '4/9':,
    '4/10':,
    '5/1':,
    '5/2':,
    '5/3':,
    '5/4':,
    '5/5':,
    '5/6':,
    '5/7':,
    '5/8':,
    '5/9':,
    '5/10':,
    '6/1':,
    '6/2':,
    '6/3':,
    '6/4':,
    '6/5':,
    '6/6':,
    '6/7':,
    '6/8':,
    '6/9':,
    '6/10':,
    '7/1':,
    '7/2':,
    '7/3':,
    '7/4':,
    '7/5':,
    '7/6':,
    '7/7':,
    '7/8':,
    '7/9':,
    '7/10':,
    '8/1':,
    '8/2':,
    '8/3':,
    '8/4':,
    '8/5':,
    '8/6':,
    '8/7':,
    '8/8':,
    '8/9':,
    '8/10':,
    '9/1':,
    '9/2':,
    '9/3':,
    '9/4':,
    '9/5':,
    '9/6':,
    '9/7':,
    '9/8':,
    '9/9':,
    '9/10':,
    '10/1':,
    '10/2':,
    '10/3':,
    '10/4':,
    '10/5':,
    '10/6':,
    '10/7':,
    '10/8':,
    '10/9':,
    '10/10':,
    '11/1':,
    '11/2':,
    '11/3':,
    '11/4':,
    '11/5':,
    '11/6':,
    '11/7':,
    '11/8':,
    '11/9':,
    '11/10':,
    '12/1':,
    '12/2':,
    '12/3':,
    '12/4':,
    '12/5':,
    '12/6':,
    '12/7':,
    '12/8':,
    '12/9':,
    '12/10':,
    '13/1':,
    '13/2':,
    '13/3':,
    '13/4':,
    '13/5':,
    '13/6':,
    '13/7':,
    '13/8':,
    '13/9':,
    '13/10':,
    '14/1':,
    '14/2':,
    '14/3':,
    '14/4':,
    '14/5':,
    '14/6':,
    '14/7':,
    '14/8':,
    '14/9':,
    '14/10':,
    '15/0':,
    '15/1':,
    '15/2':,
    '15/3':,
    '15/4':,
    '15/5':,
    '15/6':,
    '15/7':,
    '15/8':,
    '15/9':,
    '15/10':
}

# for run in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']:
#     for category in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']:
#         print(f"{run}/{category}")
